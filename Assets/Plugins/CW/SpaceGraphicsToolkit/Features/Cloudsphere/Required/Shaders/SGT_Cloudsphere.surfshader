BEGIN_OPTIONS
	Workflow "Unlit"
	Alpha "Blend"
END_OPTIONS

BEGIN_PASS("All")
	Cull [_SGT_Cull]
END_PASS

BEGIN_PROPERTIES
	[Enum(UnityEngine.Rendering.CullMode)] _SGT_Cull ("Cull", Int) = 1
	[HideInInspector] _SGT_Color("", Color) = (0,0,0)
	[HideInInspector] _SGT_Brightness("", Float) = 0
	[HideInInspector] _SGT_DistanceRatio("", Float) = 0
	[HideInInspector] _SGT_MainTex("", CUBE) = "black" {}
	[NoScaleOffset] _SGT_DepthTex("Depth Tex", 2D) = "white" {}

	[Header(NEAR FADE)]
	[Toggle(_SGT_NEAR)] _SGT_Near ("	Enable", Float) = 0
	_SGT_NearRangeRecip("	Near Range Recip", Float) = 1
	[NoScaleOffset]_SGT_NearTex("	Near Tex", 2D) = "white" {}

	[Header(DETAIL)]
	[Toggle(_SGT_DETAIL)] _SGT_Detail ("	Enable", Float) = 0
	_SGT_DetailStrength("	Detail Strength", Float) = 5
	_SGT_DetailTiling("	Detail Tiling", Float) = 1
	[NoScaleOffset]_SGT_DetailTex("	Detail Tex (A)", 2D) = "white" {}
	[NoScaleOffset]_SGT_DetailTex3D("	Detail Tex (A)", 3D) = "white" {}

	[Header(ERODE)]
	[Toggle(_SGT_ERODE)] _SGT_Erode ("	Enable", Float) = 0
	_SGT_ErodeStrength("	Erode Strength", Range(0.0, 1.0)) = 0.1
	_SGT_ErodeTiling("	Erode Tiling", Float) = 1
	[NoScaleOffset]_SGT_ErodeTex("	Erode Tex (R)", 2D) = "white" {}

	[Header(LIGHTING)]
	[Toggle(_SGT_LIGHTING)] _SGT_Lighting ("	Enable", Float) = 0
	[HDR][Gamma]_SGT_AmbientColor("	Ambient Color", Color) = (0, 0, 0, 0)
	[NoScaleOffset]_SGT_LightingTex("	Lighting Tex", 2D) = "white" {}
	
	[HideInInspector] _SGT_SoftParticlesFactor("", Float) = 0
END_PROPERTIES

BEGIN_DEFINES
	#pragma shader_feature_local _SGT_NEAR
	#pragma shader_feature_local _SGT_DETAIL
	#pragma shader_feature_local _SGT_ERODE
	#pragma shader_feature_local _SGT_LIGHTING
	#pragma multi_compile_local _ _SGT_SOFTNESS
END_DEFINES

BEGIN_CBUFFER
	float4      _SGT_Color; // Auto
	float       _SGT_Brightness; // Auto
	float       _SGT_DistanceRatio; // Auto
	samplerCUBE _SGT_MainTex; // Auto
	sampler2D   _SGT_DepthTex;
	
	// NEAR FADE
	float     _SGT_NearRangeRecip;
	sampler2D _SGT_NearTex;

	// DETAIL
	float     _SGT_DetailStrength;
	float     _SGT_DetailTiling;
	sampler2D _SGT_DetailTex;
	sampler3D _SGT_DetailTex3D;
	
	// ERODE
	float     _SGT_ErodeStrength;
	float     _SGT_ErodeTiling;
	sampler2D _SGT_ErodeTex;

	// LIGHTING
	float3    _SGT_AmbientColor;
	sampler2D _SGT_LightingTex;

	// SOFTNESS
	float _SGT_SoftParticlesFactor; // Auto
END_CBUFFER

BEGIN_CODE
	float SGT_Sample2(sampler2D tex, float4 coords, float polar, float offset)
	{
		float4 tex1 = tex2D(tex, coords.xy);
		float4 tex2 = tex2D(tex, coords.zw);
		float4 tex3 = lerp(tex1, tex2, polar);
		
		//float t = abs(frac(_Time.x * 15) * 2.0 - 1.0);
		//float t = sin(_Time.x * 35 + offset * 70) * 0.5f + 0.5f;
		float t = sin(offset * 70) * 0.5f + 0.5f;

		return lerp(tex3.x, tex3.y, t);
	}
	
	float SGT_GetOutsideDistance1(float3 ray, float3 rayD)
	{
		float B = dot(ray, rayD);
		float C = dot(ray, ray) - 1.0f;
		float D = B * B - C;
		return max(-B - sqrt(max(D, 0.0f)), 0.0f);
	}
	
	float SGT_GetOutsideDistance2(float3 ray, float3 rayD)
	{
		float B = dot(ray, rayD);
		float C = dot(ray, ray) - 1.0f;
		float D = B * B - C;
		return max(-B + sqrt(max(D, 0.0f)), 0.0f);
	}
	
	float SGT_Remap(float value, float valueMin, float valueMax)
	{
		return (value - valueMin) / (valueMax - valueMin);
	}
	
	float SGT_Hash(float n)
	{
		return frac(sin(n) * 43728.1453);
	}

	float SGT_Noise(float3 x)
	{
		float3 p = floor(x); float3 f = frac(x); f = f * f * (3.0 - 2.0 * f); float n = p.x + p.y * 55.0 + p.z * 101.0;
		return lerp(
			lerp(lerp(SGT_Hash(n      ), SGT_Hash(n +   1.0), f.x), lerp(SGT_Hash(n+ 55.0), SGT_Hash(n +  56.0), f.x), f.y),
			lerp(lerp(SGT_Hash(n+101.0), SGT_Hash(n + 102.0), f.x), lerp(SGT_Hash(n+156.0), SGT_Hash(n + 157.0), f.x), f.y), f.z);
	}

	float2 SGT_Rotate(float2 p, float angle)
	{
		float c = cos(angle); float s = sin(angle); return float2( p.x * c - p.y * s, p.x * s + p.y * c);
	}

	float2 SGT_Shift(float2 p, float step)
	{
		return float2(p.x + sin(step), p.y + cos(step));
	}

	float4 SGT_SampleFlat(sampler2D samp, float2 coord, float noise)
	{
		float i = floor(noise);
		float j = i + 1.0f;
		float p = noise - i; p = p * p * (3.0f - 2.0f * p);

		float4 coordD  = float4(ddx(coord), ddy(coord)); coordD *= abs(coordD.xxzz) < 0.5f;
		float4 sampleA = tex2Dgrad(samp, SGT_Shift(coord, i), coordD.xy, coordD.zw);
		float4 sampleB = tex2Dgrad(samp, SGT_Shift(coord, j), coordD.xy, coordD.zw);

		return lerp(sampleA, sampleB, p);
	}

	float4 SGT_SampleSpherical(sampler2D samp, float3 direction, float2 coord, float tiling)
	{
		float  u = 0.75f - atan2(direction.z, direction.x) / 3.1415926535f * 0.5f;
		float  v = 0.5f + asin(direction.y) / 3.1415926535f;
		float  p = saturate((abs(coord.y - 0.5f) - 0.2f) * 20.0f); p = p * p * (3.0f - 2.0f * p);
		float4 c = float4(float2(coord.x, coord.y * 0.5f), direction.xz * 0.25f) * tiling;
		float2 n = SGT_Noise(direction * tiling * 0.2f) * 8 + c.yw * 2;

		return lerp(SGT_SampleFlat(samp, c.xy, n.x), SGT_SampleFlat(samp, c.zw, n.y), p);
	}

	void ModifyVertex(inout VertexData v, inout ExtraV2F e)
	{
		#if __SGT_MATRIX
			float4 wpos   = SGT_O2W(v.vertex);
			float3 wnorm  = normalize(mul((float3x3)UNITY_MATRIX_M, v.normal));
			float3 wcam   = _WorldSpaceCameraPos;
			float2 coord0 = v.texcoord0.xy;

			v.texcoord3.xy = v.texcoord0.xy;

			v.texcoord1.xyz = wpos.xyz - wcam;
			v.texcoord0.xy  = abs(dot(wnorm, normalize(-v.texcoord1.xyz)));
			
			v.texcoord0.x = 1.0f - pow(1.0f - v.texcoord0.x, max(_SGT_DistanceRatio, 0.0f));

			#if _SGT_DETAIL
				v.texcoord0.y = saturate((abs(coord0.y - 0.5f) - 0.2f) * 30.0f);
				v.texcoord2 = float4(coord0.x * 2.0f, coord0.y, v.vertex.xz * 0.5f) * _SGT_DetailTiling;
				
				//v.texcoord2 += _Time.x * 0.25f;
			#endif

			#if _SGT_SOFTNESS
				v.texcoord3.z = -SGT_O2V(v.vertex).z;
			#endif
		#endif
	}

	void SurfaceFunction(inout Surface o, inout ShaderData d)
	{
		#if __SGT_OUTPUT
			float4 depth = tex2D(_SGT_DepthTex, d.texcoord0.xx);
			float4 main  = _SGT_Color * texCUBE(_SGT_MainTex, d.localSpaceNormal) * depth;

			main.rgb *= _SGT_Brightness;

			#if _SGT_NEAR
				float2 near01 = length(d.texcoord1.xyz) * _SGT_NearRangeRecip;
				float  near   = tex2D(_SGT_NearTex, near01).a;
				main.a *= near;
			#endif

			#if _SGT_DETAIL
				float offset = tex3D(_SGT_DetailTex3D, d.worldSpacePosition / 100).w * 20;
				
				float detail = SGT_Sample2(_SGT_DetailTex, d.texcoord2, d.texcoord0.y, offset) - 0.5f;
				
				
				detail += SGT_Sample2(_SGT_DetailTex, d.texcoord2 * 7, d.texcoord0.y, offset) - 0.5f;
				
				main.a += (1.0f - main.a) * detail * _SGT_DetailStrength * main.a;
			#endif
			
			#if _SGT_ERODE
				float detail = SGT_SampleSpherical(_SGT_ErodeTex, d.localSpaceNormal, d.texcoord3.xy, _SGT_ErodeTiling).x;
				
				main.a = SGT_Remap(main.a, detail * _SGT_ErodeStrength, 1.0f);
			#endif

			#if _SGT_SOFTNESS
				float sceneZ = GetLinearEyeDepth(d.screenUV);
				float partZ  = d.texcoord3.z;

				main.a *= smoothstep(0.0f, 1.0f, _SGT_SoftParticlesFactor * (sceneZ - partZ));
			#endif

			float4 finalColor = main;

			#if __SGT_LIGHTANDSHADOW
				#if _SGT_LIGHTING
					finalColor.rgb *= _SGT_AmbientColor;

					float4 lighting = 0.0f;

					for (int i = 0; i < _SGT_LightCount; i++)
					{
						float theta = dot(d.worldSpaceNormal, _SGT_LightDirection[i].xyz) * 0.5f + 0.5f;

						lighting += tex2D(_SGT_LightingTex, theta) * main * _SGT_LightColor[i];
					}

					finalColor += lighting * SGT_ShadowColor(d.worldSpacePosition);
				#else
					finalColor = SGT_ModifyUnlitOutput(finalColor);
				#endif
			#endif

			finalColor.a = saturate(finalColor.a);

			SGT_OutputWithAlpha(o, finalColor);
		#endif
	}
END_CODE